git init   ----------->   initialized git 
git status ----------->   view current status
git add -A ----------->   add all untracked files to the stage area
git rm --cached hello.html ----->  remove particular file from stage area 
rm style.css --------->  remove file from directory
git commit -a -m "First commit"  -------> commit file to master or current branch
git log ----->  log contains commit details like author, email, commit message and commit Id 
git config --global user.name "Timothy"  -------->  set this Username globally
git config --global user.email "Timothy1995@gmail.com" ---------> set this email globally
git config  user.name "Timothy"  -------->  set this Username for particular task only
git config  user.email "Timothy1995@gmail.com" ---------> set this email for particular task only
git config user.name  --------> view current username to console
git config user.email --------> view current email to console
git branch  -----------> listout all branches
git branch <branchName> ---> create new branch 
git checkout <branchName> ------> checkout to particular branch
$ git checkout -f <branchName> ------> Forcefully checkout to particular branch 
git reset Head git_cmd.txt ----->  remove particular file from stage area 
git restore git_cmd.txt ------->   modified file restored to stage area 
git restore --staged git_cmd.txt ----> remove new modification from stage area file
git branch -d <branchName> -----> Deleted particular branch
git branch -D <branchName> -----> Forcefully deleted particular branch
git diff  -----> It shows difference b/w last Commit and newly added files data
git diff hello.html  ---->  It shows difference between last commit and selected file data only
git diff <branchName> ---> It shows difference between current branch and selected branch
git stash ---->  Newly edited code not commited but we try to checkout our branch it not allowed. So temporarly store that code using stash command
git stash list ----->  listout all the stash based on stash id
git stash pop  ----->  stash applied to resend one
git stash apply stash@{0} -----> uncommited changes are visibled
git stash clear ---> Removed all stash 
git stash drop stash@{1} ----> removed stash based on stash id
<<<<<<< Updated upstream
=======
git merge <branchName>  ---->  merge data from branch to master
>>>>>>> Stashed changes









